[
["index.html", "A gRadual intRoduction to Shiny Preface 0.1 Workshop Expectations", " A gRadual intRoduction to Shiny Ted Laderas 2018-03-02 Preface 0.1 Workshop Expectations We want to foster a positive learning environment in this workshop. We expect everyone to adhere to the Code of Conduct. In short, be respectful of each other’s learning styles, don’t be dismissive or mean to someone who knows less than you, and try to help people if you see them struggle and you can help. We will enforce this and ask you to leave if you are not respectful to others. Additionally, please work together! The people in my workshops who have a really bad time and don’t get anything out of it are the ones who try to do it alone. To quote Legend of Zelda, “It’s dangerous to go alone”. Talking through the material with someone will help you understand it. We also are giving people post-it notes. Put them on your laptops so we can identify you if you need help or not. Green means “I’m okay, don’t bug me”, Red means “I need some help!”. "],
["introduction.html", "Chapter 1 Introduction 1.1 Setup 1.2 Introducing Shiny 1.3 The concept of ui and server elements", " Chapter 1 Introduction 1.1 Setup Make sure that you have the following packages installed: install.packages(c(&quot;shiny&quot;, &quot;tidyverse&quot;, &quot;fivethirtyeight&quot;, &quot;plotly&quot;)) Clone or download the tutorial from here (click the Clone or Download button, it’s green and on the right side): https://github.com/laderast/gradual_shiny Unzip, and open the gradual_shiny.Rproj file in this folder. The project should open in RStudio and you should be ready! 1.2 Introducing Shiny Welcome to Shiny! Shiny is a framework in R for making interactive visualizations for the web created by Joe Cheng. Nearly any plot in R can be made into an interactive visualization by adding some simple interface elements and mapping these interface elements into the plot. It’s an extremely powerful technique for visualization and communication of findings. Before we get started, we need to talk a little bit about the architecture of shiny apps. shiny apps are server-based, which means that all of the calculations and plot rendering happen on a server (when you’re running them in RStudio, your server is your computer). Compare this to JavaScript visualization frameworks such as D3.js, where the client’s computer needs to do all of the computing of the visualization. There are a lot of benefits to server-based frameworks, namely that your users don’t need to have a heavy-duty computer to visit your site, and that your data is sitting behind a protected server. One of the difficulties is that it can be difficult to scale for lots of users. 1.3 The concept of ui and server elements Every shiny app has two elements. The first is ui, which handles both the user controls and the layout and placement of output elements, such as plots or tables. ui usually consists of a layout scheme, with user controls (such as sliders, select boxes, radio boxes, etc) specified here. The second element is server, which handles all of the calculations and the generation of plots for ui. ui and server are only connected by two objects input, and output (they actually are environments, but we’ll just say they are objects). ui puts the values from the controls into input, which can be accessed by server. For example, if we have a slider called year_release in ui, we can access the value of that slider in server through input$year_release. server will then do something with the slider value and generate some output. Where does it put the output? If you guessed output, then give yourself a star! ui then takes output and will then display it using the various _Output functions (such as plotOutput, textOutput andtableOutput). If this is confusing, go very carefully through the diagram below. I’m happy to answer any questions you have about it. Basic shiny architecture "],
["app-1-connecting-ui-and-server.html", "Chapter 2 App 1: Connecting ui and server 2.1 Making two plots interactive 2.2 Exercise 2.3 What you’ve learned so far 2.4 For More Info", " Chapter 2 App 1: Connecting ui and server Basic shiny architecture We’ll be taking two simple ggplot2 graphs and turning them into part of an interactive dashboard. The data we’re going to use is the biopics dataset from the fivethirtyeight package. 2.1 Making two plots interactive The first visualization is a scatterplot visualizing the total box_office by year_release, colored by type_of_subject. For the interactive portion, we’re going to color each point by different categories. Notice we use aes_string() to map columns to aesthetics. This is important, since we’ll be passing character arguments to modify this plot later. library(tidyverse) library(fivethirtyeight) data(biopics) biopics %&gt;% ggplot(aes_string(y=&quot;box_office&quot;, x=&quot;year_release&quot;, color = &quot;type_of_subject&quot;)) + geom_point() The second visualization is going to be a boxplot of box_office by category: biopics %&gt;% ggplot(aes_string(x=&quot;type_of_subject&quot;, y=&quot;box_office&quot;, fill=&quot;type_of_subject&quot;)) + geom_boxplot() + theme(axis.text.x = element_text(angle=45)) 2.2 Exercise Open the 01_app_basics folder and open the app.R file. This is the file for the Shiny App and we’ll modify it. Look at the structure of the code. There are two objects that we define: ui and server. We make them into an app with the command shinyApp(ui = ui, server = server). Take a look at the server code. Notice where our ggplot2 code is. Both graphs are placed in a renderPlot() function, and we give them a place in output, so ui can “see” it. The scatterplot is named output$scatter_plot and the boxplot is named output$boxoffice_boxplot. Take a look at the ui code. Where in the code are we displaying scatter_plot and boxoffice_boxplot? Notice we don’t need to refer to output. The display function plotOutput knows to look in the output object. Run the code by clicking the “Run App” button on the top of code window. You can see that we output our graphs in the “main” window. Let’s paste in a control. Paste the following code where it says “Add User Interface Element here” in app.R. If you run the app again, you should see a control, but it doesn’t change the plot. selectInput(&quot;color_opts&quot;, &quot;Select Category to Color With&quot;, choices = select_color_options) Let’s connect the control to the plot. Change the color aesthetic to the following: color = input$color_opts Now try running the app. Your select box should control what categorical data controls the color of the points. Try it out! Bonus! Let’s add in another category option. Where should you add it? Just in case, here are the column names and their data types. You probably shouldn’t add title, director, subject, lead_actor_actress since they aren’t really categories, and they will blow up your ggplots. glimpse(biopics) ## Observations: 761 ## Variables: 14 ## $ title &lt;chr&gt; &quot;10 Rillington Place&quot;, &quot;12 Years a Slave&quot;, ... ## $ site &lt;chr&gt; &quot;tt0066730&quot;, &quot;tt2024544&quot;, &quot;tt1542344&quot;, &quot;tt2... ## $ country &lt;chr&gt; &quot;UK&quot;, &quot;US/UK&quot;, &quot;US/UK&quot;, &quot;Canada&quot;, &quot;US&quot;, &quot;US... ## $ year_release &lt;int&gt; 1971, 2013, 2010, 2014, 1998, 2008, 2002, 2... ## $ box_office &lt;dbl&gt; NA, 5.67e+07, 1.83e+07, NA, 5.37e+05, 8.12e... ## $ director &lt;chr&gt; &quot;Richard Fleischer&quot;, &quot;Steve McQueen&quot;, &quot;Dann... ## $ number_of_subjects &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 3, 3, 3... ## $ subject &lt;chr&gt; &quot;John Christie&quot;, &quot;Solomon Northup&quot;, &quot;Aron R... ## $ type_of_subject &lt;chr&gt; &quot;Criminal&quot;, &quot;Other&quot;, &quot;Athlete&quot;, &quot;Other&quot;, &quot;O... ## $ race_known &lt;chr&gt; &quot;Unknown&quot;, &quot;Known&quot;, &quot;Unknown&quot;, &quot;Known&quot;, &quot;Un... ## $ subject_race &lt;chr&gt; NA, &quot;African American&quot;, NA, &quot;White&quot;, NA, &quot;A... ## $ person_of_color &lt;lgl&gt; FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FAL... ## $ subject_sex &lt;chr&gt; &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Ma... ## $ lead_actor_actress &lt;chr&gt; &quot;Richard Attenborough&quot;, &quot;Chiwetel Ejiofor&quot;,... 2.3 What you’ve learned so far The architecture of shiny apps How ui and server communicate through output and input How ui displays plots (using plotOutput) Adding a control (a selectInput) Connecting that control to our plots using input 2.4 For More Info "],
["app-2-reactives.html", "Chapter 3 App 2: Reactives 3.1 Exercise 3.2 For More Info", " Chapter 3 App 2: Reactives So we’ve connected our control up. Great! Now let’s add a numeric filter to our data by using an reactive. reactives are the heart and soul of shiny. We’ll use a reactive to filter our data, and pass this filtered data on to our two plots. This means we can dynamically filter our data and our plots will update. A reactive can be thought of a bit of code that runs whenever the controls that map to it are changed. In this case, our reactive represents our filtered dataset when we adjust our slider. Basic workflow of reactives 3.1 Exercise Open up the 02_reactives folder and the app.R file within. Try running the app. You can see that we added a slider (using sliderInput) in ui, but it doesn’t do anything. We’re going to connect that slider to filter the biopics dataset. You might notice that there is a new object in the server code, called biopics_filtered. This is where we’re going to connect our slider. Paste the following bit of code into the reactive, after biopics. What does it do? %&gt;% filter(year_release &gt; input$year_filter) Notice how we call the reactive in output$scatter_plot? We have to use biopics_filtered() rather than biopics_filtered. A reactive is actually a function, and so you need to use the function notation to invoke it in a renderPlot statement. Ok, run the app again and adjust the slider. Notice how the top plot is changing but the bottom one isn’t. Why isn’t it running? Modify the code in output$boxoffice_boxplot to use the biopics_filtered() reactive. Where should you put it? Run the code again to make sure it works. 3.2 For More Info We’ve only shown one type of reactive, basically a reactive data.frame. Almost any type of object can be a reactive. Here are more resources on learning about them. Reactivity 101 (Dean Attali) - Dean Attali’s pages on Shiny are a good read, especially his section on reactives. Reactivity: An Overview (Official Shiny Documentation) - I personally find this overview of reactives a little confusing. "],
["app-3-adding-in-a-file-loader-observe-and-update-.html", "Chapter 4 App 3: Adding in a file loader: observe and update. 4.1 Exercise 4.2 For More Info", " Chapter 4 App 3: Adding in a file loader: observe and update. We’re going to make our file explorer more useful for other files by not hard coding variable names. We’ll take a .csv file as input, and populate our selectInputs with categories that are related to our selected variables. observe/update programming pattern 4.1 Exercise This will be more code review than activity. I apologize. Go through it and you will learn a lot. Open the app.R in 03_observe_update. Try running the following code. What is in categoricalVars and what is in numericVars? Is it what you expected? If you’re confused, please let me know. #since we&#39;re in the shiny_pdx_rlang directory, #we need to set our working directory to 03_observe_update library(fivethirtyeight) library(shiny) library(tidyverse) ##Load in the helper functions source(&quot;03/_observe_update/helper.R&quot;) data(biopics) myDataFrame &lt;- biopics ##these functions return the categorical variables and ##the numeric variables, given a data.frame ##They&#39;re in helper.R ##Try running all the code before ui ##and look at what categoricalVars and numericVars contains categoricalVars &lt;- get_category_variables(myDataFrame) numericVars &lt;- get_numeric_variables(myDataFrame) glimpse(myDataFrame) categoricalVars numericVars Try running the app, and try loading the datasetB.csv file using the file browser (it should be in 03_observe_update). Did the x_variable and y_variable selectInputs change? Let’s add a selectInput to filter on a particular category within our category variable. Uncomment all of the areas that say uncomment this code for step 4 (there are 4 sections). As you do, follow the path from the myData() reactive to the observe code block to the selectInputs in ui.R What is going on? Let’s start with the fileInput in ui.R. Where does input$file1 appear? What do we do with it in the reactive? Now let’s look at the observe codeblock. Is it dependent on a reactive? Where are we calling the reactive? What are we doing in the codeblock? What does the updateSelectInput code do? What are we passing into it? What selectInputs are we modifying? Try running the app again and make sure that it works before moving on. 4.2 For More Info There’s a few examples of updateSelectInput "],
["app-4a-adding-tooltips.html", "Chapter 5 App 4A: Adding tooltips 5.1 Exercise", " Chapter 5 App 4A: Adding tooltips Tooltips are great for examining single datapoints in the data. We’re going to add tooltips to our scatterplot so that users can hover over a datapoint and see all the information. There are a couple of web programming techniques we need to understand before we can understand how tooltips work. In terms of interactivity, shiny has the following interactions built into renderPlot(): hover (where in the graph the mouse is hovering), click (grabs the location where you clicked), and brush (select multiple points). We’ll play around with hover and click. Both the hover and click arguments will return the same thing: basically an object (we’ll call it a hover object for now) which has the x-y coordinate information about the mouse position. That gets us part of the way there. The other part is returning the row in our data that’s the closest to that point on the graph. nearPoints handles getting the row from the data.frame, which we’ll refer to as a point. We use both this hover and point object to build our tooltip. Once we have the row, we pass this on to a helper function called return_tooltip, which returns the location where we want the tooltip as well as the content of the tooltip. Then we display it onto our plot using wellPanel. 5.1 Exercise Try running the app.R in 04A_tooltips. Mouse near a data point. Did you get a tooltip? Try changing the hover argument in plotOutput to click. That is, instead of plotOutput(&quot;scatter_plot&quot;, hover = &quot;plot_hover&quot;), make it plotOutput(&quot;scatter_plot&quot;, click = &quot;plot_hover&quot;), What did that do with our interactivity? Uncomment the print statement in the renderUI codeblock. Try mousing over a point. Where is it printing the output? (hint: not the webpage.) How does this help us? If you’re really interested in how it works, try printing hover as well. "],
["app-4b-adding-tooltips-with-plotly.html", "Chapter 6 App 4B: Adding tooltips with plotly 6.1 Exercise 6.2 For More Info", " Chapter 6 App 4B: Adding tooltips with plotly There is another way to add tooltips: use the plotly library. This is a JavaScript (built on top of d3.js) library that makes your ggplots more interactive, with built in tooltips. The plotly library itself relies on d3.js, which is a client-side visualization library. So if you add plotly, does this make your shiny app client-based? Not quite. All of the controls and data serving are still done server-side. It’s only the last bit that is translated to JavaScript and is client-side. Please note that we’re not putting anything on the plotly servers when we do this. All of the data still lives on your server. 6.1 Exercise Try running the app.R in 04B_tooltips_plotly. Mouse over a datapoint. Neat, huh? How did we supply the infomation to the tooltip? Take a look at the aes_string() code. Notice we’re passing in a bunch of dummy variables into aes_string. Do these variables appear in the tooltip? 6.2 For More Info The plotly package can instantly make your graphs more interactive using the ggplotly() function. For more info and some recipes, go here: https://plot.ly/ggplot2/ "],
["the-finished-app.html", "Chapter 7 The Finished App", " Chapter 7 The Finished App "],
["testing-apps-with-shinytest.html", "Chapter 8 Testing apps with shinytest", " Chapter 8 Testing apps with shinytest "],
["where-next.html", "Chapter 9 Where Next? 9.1 Programming Resources 9.2 Cool Shiny Enhancements 9.3 Deploying your app 9.4 Debugging your app 9.5 I want more!", " Chapter 9 Where Next? The wide world of shiny is now yours for the taking. I’m compiling a list of resources that I found really useful below. 9.1 Programming Resources The Shiny Gallery - Tons of examples about how to implement things in Shiny. Please note that the examples can be a little too terse. Dean Attali’s Site - his “Advanced Shiny Tips” page has a really useful FAQ. This is usually where I start when I have a question. Advanced Shiny (Dean Attali) - This is the repo for all of Dean’s shiny tips. Plotly - with the plotly package, you can translate ggplots into client-side d3.js plots, which can be customized with a lot more interactivity, and it runs on top of shiny. I’m still learning how to use it, but you can make your interactive graphics very slick with it. 9.2 Cool Shiny Enhancements flexDashboard - Mix Rmarkdown and shiny! Make interactive documents! shinyDashboard - Make a more professional dashboard for your integrated shiny app. Includes alerts, menus, and status updates. shinyLP - Make a landing page for your shiny app. By Jasmine Dumas. shinyjs - Add more JavaScript components to your shiny app. 9.3 Deploying your app You may notice that we’ve run everything on our own machines. What if we want to share our apps? We’ll need to deploy them to a web accessible server. There are two main places you can deploy your Shiny apps. https://shinyapps.io is a more streamlined service, and it lets you push apps to it using the rsconnect package. For more info, go here: http://docs.rstudio.com/shinyapps.io/. The free account gives you 5 free apps and something like 25 hours of access time for free. if you need more service, Rstudio’s new RStudio Connect service: https://www.rstudio.com/products/connect/. Rstudio Connect is more of a complete solution, giving you a web-accessible Rstudio server instance along with a shiny server instance. It costs money. You can also install Shiny Server on something like a DigitalOcean Droplet, or a web-accessible server. Note that if you are non-academic, or need things like user authentication, you’ll need to pay for a license. 9.4 Debugging your app Debugging is probably one of the most difficult things about an interactive app. You can see certain errors in your console, but they aren’t usually very helpful because these errors aren’t localized to a line number. Instead, you’ll have to use things like print statements and breakpoints to debug your app. More info here: https://shiny.rstudio.com/articles/debugging.html Don’t forget there is a vibrant Shiny user community that you can ask for help! https://shiny.rstudio.com/articles/help.html 9.5 I want more! Look into the world of htmlwidgets: http://www.htmlwidgets.org. Basically, people are trying to bring more visualization frameworks (such as d3.js) to R. Someone may have a htmlwidget that could work for you. "]
]
